---
- name: Provision instance
  hosts: local
  connection: local
  gather_facts: True

  tasks:
    - name: Make sure that files/ssh-keys directory exists
      file:
        path: "{{ temp_folder }}"
        state: directory

    - name: Create an SSH key pair
      ec2_key:
        name: "{{ key_pair_name }}"
        region: "{{ ec2_region }}"
        wait: True
      register: key_pair

    - name: Dump key pair
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "{{ key_pair_file }}"
        mode: 0600

    - name: Create temporary VPC
      ec2_vpc_net:
        state: present
        name: vyos
        cidr_block: 10.0.0.0/16
        region: "{{ ec2_region }}"
        resource_tags:
          Type: vyos
          Name: "{{ placeholder }}"
      register: vpc

    - name: Register internet gateway for temporary VPC
      ec2_vpc_igw:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ ec2_region }}"
      register: igw

    - name: Create a subnet for the temporary VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ ec2_region }}"
        cidr: 10.0.0.0/16
      register: subnet

    - name: Create a routing table for temporary VPC
      ec2_vpc_route_table:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ ec2_region }}"
        tags:
          name: vyos
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: route_table

    - name: Create temporary security group
      ec2_group:
        name: default
        description: This security group was generated by ansible playbook vyos_build_ami.yml
        region: "{{ ec2_region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    # Look up the AMI id to use based on a search
    - name: Look up Ubuntu AMI ID
      ec2_ami_find:
        architecture: x86_64
        region: "{{ ec2_region }}"
        owner: 099720109477
        name: "ubuntu/images/hvm/{{ ubuntu_version }}-amd64-server-*"
        sort: name
        sort_order: descending
        sort_end: 1
      register: ami_id

    # ---- Launch EC2 instance ----
    - name: Launch an EC2 instance
      ec2:
        key_name: "{{ key_pair_name }}"
        assign_public_ip: True
        image: "{{ ami_id.results[0].ami_id }}"
        instance_type: "{{ instance_type }}"
        region: "{{ ec2_region }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        wait: yes
        instance_tags:
          Name: "{{ placeholder }}"
          Type: "VyOS"
        volumes:
          - device_name: /dev/sdf
            volume_type: gp2
            volume_size: "{{ volume_size }}"
            delete_on_termination: True
      register: ec2_instance

    - name: Add instance's public DNS name to ansible host group ec2
      add_host:
        name: "{{ ec2_instance.instances[0].public_ip }}"
        groups: ec2

    - name: Instance public IP address
      debug: 
        msg: "{{ ec2_instance.instances[0].public_ip }}"

    - name: Wait for instance's SSH port to open
      wait_for:
        host: "{{ ec2_instance.instances[0].public_ip }}"
        port: 22
        delay: 10
        state: started

